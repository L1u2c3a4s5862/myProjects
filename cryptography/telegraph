#!/usr/local/bin/python3
# -*- coding: utf-8 -*-

import argparse
import string
import random
import re

# TODO: add few functions to the program
# TODO: `stringz`, `morse` and `bookCipher`
# function for list to string
def stringz(list):
    return ''.join([str(i) for i in list])
# function for morse code encode and decode
def morse(filename, mode):
    # morse code encoding
    morse_encode = ''
    morse_decode = ''
    # dictionary of morse code
    morse_dict = {
        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.',
        'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---',
        'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---',
        'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-',
        'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--',
        'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-',
        '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',
        '0': '-----', ' ': '/', ':': '---...', '.': '.-.-.-'
        }
    # open file
    with open(filename, 'r') as f:
        morse_code = f.read()
    # morse code split
    morse_pass = morse_code.split(' ')
    if mode == 'encode':
        # find the keys from the dictionary
        for i in range(len(morse_pass)):
            for values, keys in morse_dict.items():
                if values == morse_pass[i]:
                    morse_encode += keys
        # return the morse code encoded
        return morse_encode
    elif mode == 'decode':
        for i in range(len(morse_pass)):
            for keys, values in morse_dict.items():
                if keys == morse_pass[i]:
                    morse_decode += values
        # return the morse code decoded
        return morse_decode
# book cipher encoding
def bookCipher(filename, mode):
    # open the book from the morse encode
    with open(stringz(re.findall('[a-zA-Z]+.[a-zA-A]+', morse_encode)), 'r') as f:
        book_mark = f.read()
    # read the file from the previous function
    book_text = morse(text, filename)
    useful_book_text = re.findall('\d+:\d+', book_text)
    if mode == 'decode':
        decrypted_book_message = ''
        row = []
        col = []
        mesg_num = []
        # calculate the dimensions of the book
        dim = [book_mark.split('\n')[i].split(' ') for i in range(len(book_mark.split('\n')))]
        book_message = usefull_book_text.split(' ')
        code_len = len(book_message)
        # calculate the rows and cols of the book
        for i in range(code_len):
            mesg_num.append(book_message[i].split(':'))
            row.append(mesg_num[i][0])
            col.append(mesg_num[i][1])
            decrypted_book_message += f'{dim[int(row[i])-1][int(col[i])-1]} '
        # print the decrypted book message
        print(f'\033[1;32m[+]\033[1;0m The decrypted book message: \033[1;36m`{decrypted_book_message}`\033[1;0m')
    elif mode == 'encode':
        encrypted_book_message = ''
        cood = []
        # dimensions of the book
        dim = [book_mark.split('\n')[i].split(' ') for i in range(len(book_mark.split('\n')))]
        # calculate the coordinates of the book cipher text
        book_message = usefull_book_text.split(' ')
        for code_len in range(len(book_message.translate(str.maketrans('', '', string.punctuation)).split(' '))):
            for index, row in enumerate(dim):
                if book_message.translate(str.maketrans('', '', string.punctuation)).split(' ')[code_len] in row:
                    pos = [index, row.index(message.translate(str.maketrans('', '', string.punctuation)).split(' ')[code_len])]
                    cood.append(pos)
            encrypted_book_message += f'{cood[code_len][0]+1}:{cood[code_len][1]+1} '
        # print the encrypted book message
        print(f'\033[1;32m[+]\033[1;0m The encrypted book message: \033[1;36m`{encrypted_book_message}`\033[1;0m')

# TODO: write the main function to actrally run the program
# import function `telegraph
def telegraph(filename, mode):
    # choosing the mode
    if mode == 'decode':
        # call the morse decode function first for decoding
        morse(text, filename, mode='decode')
        bookCipher(text, filename, mode='decode')
    # if the mode is encode
    if mode == 'encode':
        # book cipher encoding first for encoding
        bookCipher(text, filename, mode='encode')
        morse(text, filename, mode='encode')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description='telegraph encoder and decoder')
    parser.add_argument('mode', help='the mode you want to use: \033[1;36m(encode or decode)\033[1;0m')
    parser.add_argument('-f', '--file', help='the file you want to encrypt or decrypt\n\033[1;31m(do not write `~` as the Users/Home directory)\033[1;0m')
    args = parser.parse_args()
    # call the function telegraph
    telegraph(args.file, args.mode)