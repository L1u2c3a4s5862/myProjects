#!/usr/local/bin/python3
# -*- coding: utf-8 -*-

import random
import string
import colorama
colorama.init()
import argparse
from random import randint
from texttable import Texttable
t = Texttable()

alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
# create few functions for further coding
def banners():
	print("▓█████  ███▄    █  ██▓  ▄████  ███▄ ▄███▓ ▄▄▄          ▄████▄   ██▓ ██▓███   ██░ ██ ▓█████  ██▀███  ")
	print("▓█   ▀  ██ ▀█   █ ▓██▒ ██▒ ▀█▒▓██▒▀█▀ ██▒▒████▄       ▒██▀ ▀█  ▓██▒▓██░  ██▒▓██░ ██▒▓█   ▀ ▓██ ▒ ██▒")
	print("▒███   ▓██  ▀█ ██▒▒██▒▒██░▄▄▄░▓██    ▓██░▒██  ▀█▄     ▒▓█    ▄ ▒██▒▓██░ ██▓▒▒██▀▀██░▒███   ▓██ ░▄█ ▒")
	print("▒▓█  ▄ ▓██▒  ▐▌██▒░██░░▓█  ██▓▒██    ▒██ ░██▄▄▄▄██    ▒▓▓▄ ▄██▒░██░▒██▄█▓▒ ▒░▓█ ░██ ▒▓█  ▄ ▒██▀▀█▄  ")
	print("░▒████▒▒██░   ▓██░░██░░▒▓███▀▒▒██▒   ░██▒ ▓█   ▓██▒   ▒ ▓███▀ ░░██░▒██▒ ░  ░░▓█▒░██▓░▒████▒░██▓ ▒██▒")
	print("░░ ▒░ ░░ ▒░   ▒ ▒ ░▓   ░▒   ▒ ░ ▒░   ░  ░ ▒▒   ▓▒█░   ░ ░▒ ▒  ░░▓  ▒▓▒░ ░  ░ ▒ ░░▒░▒░░ ▒░ ░░ ▒▓ ░▒▓░")
	print(" ░ ░  ░░ ░░   ░ ▒░ ▒ ░  ░   ░ ░  ░      ░  ▒   ▒▒ ░     ░  ▒    ▒ ░░▒ ░      ▒ ░▒░ ░ ░ ░  ░  ░▒ ░ ▒░")
	print("                                     \033[1;35m-=Author: Lucas Liu=-\033[1;0m                                     ")

def rotorSetting(numberOfRotors):
	rotors = ["I", "II", "III", "IV", "V"]
	i = randint(0, numberOfRotors-1)
	ii = randint(0, numberOfRotors-1)
	while ii==i:
		ii = randint(0, numberOfRotors-1)
	iii = randint(0, numberOfRotors-1)
	while iii==i or iii==ii:
		iii = randint(0, numberOfRotors-1)
	# set the rotors
	rotor_i = rotors[i]
	rotor_ii = rotors[ii]
	rotor_iii = rotors[iii]
	# change the `settings` to settings
	settings = rotor_i + " " + rotor_ii + " " + rotor_iii
	settings = settings + (""*(9-len(settings)))
	return settings.split(" ")

def rotorPosition(numberOfRotors):
	settings = ""
	for i in range(numberOfRotors):
		rotor = randint(0, 25)
		settings = settings + alphabet[rotor]
	return settings

def ringSetting(numberOfRotors):
	settings = ""
	for i in range(numberOfRotors):
		rotor = randint(0, 25)
		settings = settings + alphabet[rotor]
	return settings

def plugboardSetting(numberOfPermutations):
	settings = ""
	stecksA = []
	stecksB= []
	for i in range(numberOfPermutations):
		a = randint(0, 25)
		while a in stecksA:
			a = randint(0, 25)
		stecksA.append(a)
	for i in range(numberOfPermutations):
		b = randint(0, 25)
		while b in stecksA or b in stecksB:
			b = randint(0, 25)
		stecksB.append(b)
	stecksA.sort()
	settings=""
	for i in range(numberOfPermutations):
		settings = settings + alphabet[stecksA[i]] + alphabet[stecksB[i]] + " "
	settings = settings[:-1]
	return settings

def caesarShift(str, amount):
	output = ""
	for i in range(0,len(str)):
		c = str[i]
		code = ord(c)
		if ((code>=65) and (code<=90)):
			c = chr(((code-65+amount)%26)+65)
		output = output+c
	return output

def enigmaCipher(reflector, rotors, ringSettings, ringPositions, plugboard, message):
	"""
	rotor: rotors for encoder to set the alphabets
	ring: rings for encoder to set the alphabets
	plugboard: the alphabets for the second same letters
	message: the message you want to encode
	mode: `encrypt`, `decrypt` or `random`
	"""
	# set the rotors for encode
	rotor1 = "EKMFLGDQVZNTOWYHXUSPAIBRCJ"
	rotor1Notch = "Q"
	rotor2 = "AJDKSIRUXBLHWTMCQGZNPYFVOE"
	rotor2Notch = "E"
	rotor3 = "BDFHJLCPRTXVZNYEIWGAKMUSQO"
	rotor3Notch = "V"
	rotor4 = "ESOVPZJAYQUIRHXLNFTGKDCMWB"
	rotor4Notch = "J"
	rotor5 = "VZBRGITYUPSDNHLXAWMJQOFECK"
	rotor5Notch = "Z"

	# set the rotor and rotor notch to a dictionary
	rotorDict = {"I":rotor1,"II":rotor2,"III":rotor3,"IV":rotor4,"V":rotor5}
	rotorNotchDict = {"I":rotor1Notch,"II":rotor2Notch,"III":rotor3Notch,"IV":rotor4Notch,"V":rotor5Notch}

	# set the relectors for encoder
	reflectorB = {"A":"Y","Y":"A","B":"R","R":"B","C":"U","U":"C","D":"H","H":"D","E":"Q","Q":"E","F":"S","S":"F","G":"L","L":"G","I":"P","P":"I","J":"X","X":"J","K":"N","N":"K","M":"O","O":"M","T":"Z","Z":"T","V":"W","W":"V"}
	reflectorC = {"A":"F","F":"A","B":"V","V":"B","C":"P","P":"C","D":"J","J":"D","E":"I","I":"E","G":"O","O":"G","H":"Y","Y":"H","K":"R","R":"K","L":"Z","Z":"L","M":"X","X":"M","N":"W","W":"N","Q":"T","T":"Q","S":"U","U":"S"}

	# rotor A, B, C notches
	alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	rotorANotch = False
	rotorBNotch = False
	rotorCNotch = False

	# giving reflectors to generate dictionary
	if reflector=="UKW-B":
		reflectorDict = reflectorB
	else:
		reflectorDict = reflectorC

	# A=Left, B=Mid, C=Right
	rotorA = rotorDict[rotors[0]]
	rotorB = rotorDict[rotors[1]]
	rotorC = rotorDict[rotors[2]]

	rotorANotch = rotorNotchDict[rotors[0]]
	rotorBNotch = rotorNotchDict[rotors[1]]
	rotorCNotch = rotorNotchDict[rotors[2]]

	rotorALetter = ringPositions[0]
	rotorBLetter = ringPositions[1]
	rotorCLetter = ringPositions[2]

	rotorASetting = ringSettings[0]
	offsetASetting = alphabet.index(rotorASetting)
	rotorBSetting = ringSettings[1]
	offsetBSetting = alphabet.index(rotorBSetting)
	rotorCSetting = ringSettings[2]
	offsetCSetting = alphabet.index(rotorCSetting)

	rotorA = caesarShift(rotorA,offsetASetting)
	rotorB = caesarShift(rotorB,offsetBSetting)
	rotorC = caesarShift(rotorC,offsetCSetting)

	if offsetASetting>0:
		rotorA = rotorA[26-offsetASetting:]+rotorA[0:26-offsetASetting]
	if offsetBSetting>0:
		rotorB = rotorB[26-offsetBSetting:]+rotorB[0:26-offsetBSetting]
	if offsetCSetting>0:
		rotorC = rotorC[26-offsetCSetting:]+rotorC[0:26-offsetCSetting]

	# set the message
	ciphertext = ""
	# Converplugboard settings into a dictionary
	plugboardConnections = plugboard.upper().split(" ")
	plugboardDict = {}
	for pair in plugboardConnections:
		if len(pair)==2:
			plugboardDict[pair[0]] = pair[1]
			plugboardDict[pair[1]] = pair[0]

	message = message.upper()
	for letter in message:
		encryptedLetter = letter
		if letter in alphabet:
			# Rotate Rotors - This happens as soon as a key is pressed, before encrypting the letter!
			rotorTrigger = False
			# Third rotor rotates by 1 for every key being pressed
			if rotorCLetter == rotorCNotch:
				rotorTrigger = True

			rotorCLetter = alphabet[(alphabet.index(rotorCLetter)+1)%26]
			# Check if rotorB needs to rotate
			if rotorTrigger:
				rotorTrigger = False
				if rotorBLetter == rotorBNotch:
					rotorTrigger = True

				rotorBLetter = alphabet[(alphabet.index(rotorBLetter)+1)%26]
				# Check if rotorA needs to rotate
				if (rotorTrigger):
					rotorTrigger = False
					rotorALetter = alphabet[(alphabet.index(rotorALetter)+1)%26]
			else:
				# Check for double step sequence!
				if rotorBLetter == rotorBNotch:
					rotorBLetter = alphabet[(alphabet.index(rotorBLetter)+1)%26]
					rotorALetter = alphabet[(alphabet.index(rotorALetter)+1)%26]

			# Implement plugboard encryption!
			if letter in plugboardDict.keys():
				if plugboardDict[letter]!="":
					encryptedLetter = plugboardDict[letter]

			#Rotors & Reflector Encryption
			offsetA = alphabet.index(rotorALetter)
			offsetB = alphabet.index(rotorBLetter)
			offsetC = alphabet.index(rotorCLetter)
			# Wheel 3 Encryption
			pos = alphabet.index(encryptedLetter)
			let = rotorC[(pos+offsetC)%26]
			pos = alphabet.index(let)
			encryptedLetter = alphabet[(pos-offsetC+26)%26]
			# Wheel 2 Encryption
			pos = alphabet.index(encryptedLetter)
			let = rotorB[(pos+offsetB)%26]
			pos = alphabet.index(let)
			encryptedLetter = alphabet[(pos-offsetB+26)%26]  
			# Wheel 1 Encryption
			pos = alphabet.index(encryptedLetter)
			let = rotorA[(pos+offsetA)%26]
			pos = alphabet.index(let)
			encryptedLetter = alphabet[(pos-offsetA+26)%26]
			# Reflector encryption!
			if encryptedLetter in reflectorDict.keys():
				if reflectorDict[encryptedLetter]!="":
					encryptedLetter = reflectorDict[encryptedLetter]

			# Back through the rotors 
			# Wheel 1 Encryption
			pos = alphabet.index(encryptedLetter)
			let = alphabet[(pos+offsetA)%26]
			pos = rotorA.index(let)
			encryptedLetter = alphabet[(pos-offsetA+26)%26] 
			# Wheel 2 Encryption
			pos = alphabet.index(encryptedLetter)
			let = alphabet[(pos+offsetB)%26]
			pos = rotorB.index(let)
			encryptedLetter = alphabet[(pos-offsetB+26)%26]
			# Wheel 3 Encryption
			pos = alphabet.index(encryptedLetter)
			let = alphabet[(pos+offsetC)%26]
			pos = rotorC.index(let)
			encryptedLetter = alphabet[(pos-offsetC+26)%26]
			# Implement plugboard encryption!
			if encryptedLetter in plugboardDict.keys():
				if plugboardDict[encryptedLetter]!="":
					encryptedLetter = plugboardDict[encryptedLetter]

		ciphertext = ciphertext+encryptedLetter

	# sprint out the encrypted message
	print(f"\033[1;32mEnigma M3 {reflector} Encrypter\033[1;0m")
	t.add_rows([["Encrypted Message", ciphertext], ["Rotor Setting", rotors], ["Ring Setting", ringSettings], ["Ring Position", ringPositions], ["Plugboard", plugboard]])
	print(t.draw())

if __name__ == '__main__':
	parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description=banners())
	parser.add_argument("-r", "--reflector", default="UKW-B", 
		help="\033[1;31mrelfector setting: \033[1;32m'UKW-B'\033[1;0m")
	parser.add_argument("-ro", "--rotor-setting", default=None, 
		help="\033[1;31mrotor setting: \033[1;32m'I, II, III'\033[1;0m")
	parser.add_argument("-rs", "--ring-setting", default=None, 
		help="\033[1;31mring setting: \033[1;32m'ABC'\033[1;0m")
	parser.add_argument("-rp", "--ring-position", default=None, 
		help="\033[1;31mring position: \033[1;32m'DEF'\033[1;0m")
	parser.add_argument("-p", "--plugboard", default=None, 
		help="\033[1;31mplugboard setting: \033[1;32m'AB CD EF GH IJ KL MN OP QR ST'\033[1;0m")
	parser.add_argument("-m", "--message", default=None, 
		help="message you want the encrypt or decrypt")
	args = parser.parse_args()

	if args.rotor_setting is None:
		args.rotor_setting = tuple(rotorSetting(5))
	else:
		args.rotor_setting = tuple(args.rotor_setting.split(", "))
	if args.ring_setting is None:
		args.ring_setting = ringSetting(3)
	if args.ring_position is None:
		args.ring_position = rotorPosition(3)
	if args.plugboard is None:
		args.plugboard = plugboardSetting(randint(8, 13))

	enigmaCipher(args.reflector, args.rotor_setting, args.ring_setting, args.ring_position, args.plugboard, args.message)
