#!/usr/local/bin/python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import string
import argparse
import itertools

# banner of program
banner = """
██╗    ██╗ ██████╗ ██████╗ ██████╗ ██╗     ██╗███████╗████████╗     ██████╗ ███████╗███╗   ██╗
██║    ██║██╔═══██╗██╔══██╗██╔══██╗██║     ██║██╔════╝╚══██╔══╝    ██╔════╝ ██╔════╝████╗  ██║
██║ █╗ ██║██║   ██║██████╔╝██║  ██║██║     ██║███████╗   ██║       ██║  ███╗█████╗  ██╔██╗ ██║
██║███╗██║██║   ██║██╔══██╗██║  ██║██║     ██║╚════██║   ██║       ██║   ██║██╔══╝  ██║╚██╗██║
╚███╔███╔╝╚██████╔╝██║  ██║██████╔╝███████╗██║███████║   ██║       ╚██████╔╝███████╗██║ ╚████║
 ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝╚══════╝   ╚═╝        ╚═════╝ ╚══════╝╚═╝  ╚═══╝
\033[1;35m                                    -=Author: Lucas Liu=-                                      \033[1;0m
"""
# function to print banner
def banners(banner):
    print(banner)

# function to create wordlist
def createWordList(chrs, min_length, max_length, output):
    """
    :param `chrs` is characters to iterate.
    :param `min_length` is minimum length of characters.
    :param `max_length` is maximum length of characters.
    :param `output` is output of wordlist file.
    """
    # check if `min_length` is smaller
    if min_length > max_length:
        print ("[!] Please `min_length` must smaller or same as with `max_length`")
        sys.exit()
    # check if `output` directory exists
    if os.path.exists(os.path.dirname(output)) == False:
        os.makedirs(os.path.dirname(output))
    # display the create wordlist informations
    print ('\033[1;32m[+]\033[1;31m Creating wordlist at \033[1;36m`%s`\033[1;0m...' % output)
    # display the start time
    print ('\033[1;34m[i]\033[1;32m Starting time: \033[1;31m%s\033[1;0m' % time.strftime('%H:%M:%S'))
    # create wordlist file
    output = open(output, 'w')
    for n in range(min_length, max_length + 1):
        for xs in itertools.product(chrs, repeat=n):
            chars = ''.join(xs)
            output.write("%s\n" % chars)
            # print character to stdout
            sys.stdout.write('\r\033[1;36m[+]\033[1;31m saving character \033[1;36m`%s`\033[1;0m' % chars)
            sys.stdout.flush()
    output.close()
    # display the end time
    print ('\n\033[1;34m[i]\033[1;32m End time: \033[1;31m%s\033[1;0m' % time.strftime('%H:%M:%S'))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter, description=banners(banner))
    parser.add_argument('-chr', '--chars', default=string.printable.replace(' \t\n\r\x0b\x0c', ''), help='characters to iterate\nthe default is ASCII printable characters')
    parser.add_argument('min_length', type=int, help='minimum length of characters')
    parser.add_argument('max_length', type=int, help='maximum length of characters')
    parser.add_argument('-out', '--output', default='output/wordlist.txt', help='output of wordlist file.')
    args = parser.parse_args()
    # execute `createWordList` function
    createWordList(args.chars, args.min_length, args.max_length, args.output)
