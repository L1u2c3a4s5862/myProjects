#!/usr/local/bin/python3
# -*- coding: utf-8 -*-

import time
import random
import argparse

# banner
banner = """
███╗   ███╗ █████╗ ███████╗███████╗     ██████╗ ███████╗███╗   ██╗
████╗ ████║██╔══██╗╚══███╔╝██╔════╝    ██╔════╝ ██╔════╝████╗  ██║
██╔████╔██║███████║  ███╔╝ █████╗      ██║  ███╗█████╗  ██╔██╗ ██║
██║╚██╔╝██║██╔══██║ ███╔╝  ██╔══╝      ██║   ██║██╔══╝  ██║╚██╗██║
██║ ╚═╝ ██║██║  ██║███████╗███████╗    ╚██████╔╝███████╗██║ ╚████║
╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝     ╚═════╝ ╚══════╝╚═╝  ╚═══╝
\033[1;35m                      -=Author: Lucas Liu=-                      \033[1;0m
\033[1;33mThis maze generator can generate a rectangular maze\033[1;0m
\033[1;32mDescreption:\033[1;0m
🟥: Start point      🟩: Finish point
⬛: Wall             ⬜: Path
"""
def banners(banner):
    print(banner)

class Cell:
    # Cell class that defines each walkable Cell on the grid
    def __init__(self, x: int, y: int):
        self.x = x
        self.y = y
        self.visited = False
        self.walls = [True, True, True, True]
    # Check if the Cell has any surrounding unvisited Cells that are walkable
    def getChildren(self, grid: list) -> list:
        a = [(1, 0), (-1, 0), (0, 1), (0, -1)]
        children = []
        for x, y in a:
            if self.x+x in [len(grid[0]), -1] or self.y+y in [-1, len(grid)]:
                continue
            child = grid[self.y+y][self.x+x]
            if child.visited:
                continue
            children.append(child)
        return children
# Removeing the wall between two Cells
def removeWalls(current: Cell, choice: Cell):
    if choice.x > current.x:
        current.walls[1] = False
        choice.walls[0] = False
    elif choice.x < current.x:
        current.walls[0] = False
        choice.walls[1] = False
    elif choice.y > current.y:
        current.walls[3] = False
        choice.walls[2] = False
    elif choice.y < current.y:
        current.walls[2] = False
        choice.walls[3] = False
# Draw existing walls around Cells
def drawWalls(grid: list, binGrid: list) -> list:
    for yindex, y in enumerate(grid):
        for xindex, x in enumerate(y):
            for i, w in enumerate(x.walls):
                if i == 0 and w:
                    binGrid[yindex*2+1][xindex*2] = '⬛'
                if i == 1 and w:
                    binGrid[yindex*2+1][xindex*2+2] = '⬛'
                if i == 2 and w:
                    binGrid[yindex*2][xindex*2+1] = '⬛'
                if i == 3 and w:
                    binGrid[yindex*2+2][xindex*2+1] = '⬛'
    return binGrid
# Draw a border around the maze
def drawBorder(grid: list) -> list:
    for row in grid:
        row[0] = row[-1] = '⬛'
    grid[0] = grid[-1] = ['⬛']*len(grid[0])
    return grid
# Draw the maze using ASCII characters and display the maze
def displayMaze(grid: list):
    binGrid = []
    length_y = len(grid)*2+1
    length_x = len(grid[0])*2+1
    for x in range(length_y):
        if x % 2 == 0:
            binGrid.append(
                ['⬜' if y % 2 != 0 else '⬛' for y in range(length_x)])
        else:
            binGrid.append(['⬜'] * length_x)
    binGrid = drawWalls(grid, binGrid)
    binGrid = drawBorder(binGrid)
    binGrid[1][1] = '🟥'  # Start point
    binGrid[-2][-2] = '🟩'  # Finish point
    print('\n'.join([''.join(x) for x in binGrid]))

# Request the user to input maze dimensions and initialise the maze, stack and initial Cell
parser = argparse.ArgumentParser(description=banners(banner))
parser.add_argument('width', type=int, help='Width of the maze to be generated')
parser.add_argument('height', type=int, help='Height of the maze to be generated')
args = parser.parse_args()
width = args.width
height = args.height
grid = [[Cell(x, y) for x in range(width)] for y in range(height)]
current = grid[0][0]
stack = []
# Main loop to generate the maze
while True:
    current.visited = True
    children = current.getChildren(grid)
    if children:
        choice = random.choice(children)
        choice.visited = True
        stack.append(current)
        removeWalls(current, choice)
        current = choice
    elif stack:
        current = stack.pop()
    else:
        break
# Display the maze
print("\033[1;34mgenerating maze...\033[1;0m")
time.sleep(0.5)
displayMaze(grid)
